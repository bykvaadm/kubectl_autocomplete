__get_namespace() {
    local i c=1 namespace

    for (( c=1; c <= ${#COMP_WORDS[@]}; c++ )); do
        i="${COMP_WORDS[c]}"
        case "$i" in
            --namespace)
                c=$((++c))
                i="${COMP_WORDS[c]}"
                namespace="${i##*=}";
                break
                ;;
            -n)
                c=$((++c))
                i="${COMP_WORDS[c]}"
                namespace="${i##*=}";
                break
                ;;
        esac
    done
    echo $namespace
}

_kubectl() 
{
    local cur prev opts base
    COMPREPLY=()

    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"

    args="deployment po svc pv pvc configmaps create expose run set run-container get explain edit delete rollout rolling-update scale autoscale certificate cluster-info top cordon uncordon drain taint describe logs attach exec port-forward proxy cp auth apply patch replace convert label annotate completion api-versions config help plugin version"
    opts="--help --namespace --all-namespaces -n -o"
    output="wide yaml"

    case "${prev}" in
        #-f)
	#    complete -d kubectl
        #    return 0
        #    ;;
        po|-ti)
            local namespace=$(__get_namespace)
            local pods=$(kubectl get po -n $namespace | awk '{print $1}' | grep -v "NAME")
            COMPREPLY=( $(compgen -W "${pods}" -- ${cur}) )
            return 0
            ;;
        -n|--namespace)
            local namespaces=$(kubectl get ns | awk '{print $1}' | grep -v "NAME")
            COMPREPLY=( $(compgen -W "${namespaces}" -- ${cur}) )
            return 0
            ;;
	-o)
	    COMPREPLY=( $(compgen -W "${output}" -- ${cur}) )
            return 0
            ;;
        *)
        ;;
    esac

    if [[ ${cur} == -* ]] ; then
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    else
        COMPREPLY=( $(compgen -W "${args}" -- ${cur}) )
        return 0
    fi

}
complete -F _kubectl kubectl
